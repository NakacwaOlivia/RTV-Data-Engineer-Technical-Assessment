RTV Data Engineer Technical Assessment
📌 Overview
This repository contains the solution to the Raising The Village (RTV) Data Engineering Technical Assessment. The goal is to build a complete data pipeline and analytical dashboard to track poverty-related household progress using RTV’s longitudinal survey data.

📁 Repository Structure
rtv-data-engineer-assessment/
├── data/
│   ├── combined_data/                   # Provided datasets & collection tools
├── notebooks/
│   ├── exploratory_analysis.ipynb       # EDA and profiling
├── pipeline/
│   ├── ingestion/                       # Ingestion scripts
│   ├── transformation/                 # Transformation logic
│   └── orchestration/                  # Airflow / Prefect DAGs or workflow scripts
├── warehouse/
│   ├── schema.sql                       # DDL for data warehouse
│   ├── models/                          # dbt or SQL models
├── dashboard/
│   ├── app.py                           # Streamlit/Dash/PowerBI logic
├── docs/
│   ├── architecture_diagram.png
│   ├── design_document.md
│   └── data_quality_report.md
├── tests/
│   ├── test_pipeline.py                 # Unit tests
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
└── README.md
⚙️ Setup Instructions
1. Clone the Repository
git clone https://github.com/yourusername/rtv-data-engineer-assessment.git
cd rtv-data-engineer-assessment

2. Create and Activate Virtual Environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install -r requirements.txt

3. Launch Services via Docker
docker-compose up --build
PostgreSQL and MinIO will be initialized.

Airflow UI available at http://localhost:8080

4. Run the Pipeline
Depending on the orchestration used:

# If using Airflow
airflow dags trigger rtv_pipeline
Or run scripts manually for ingestion/transformation.

🛠️ Technology Stack
Python, Pandas, SQL

PostgreSQL (Data Warehouse)

MinIO (Object Storage)

Apache Airflow or Prefect (Orchestration)

dbt Core (Transformations)

Streamlit

Docker & Docker Compose

📊 Dashboard
The dashboard allows users to:

View trends across Baseline, Year 1, and Year 2 surveys.

Drill down by geography, household indicators, and derived metrics.

Track progress on key poverty metrics over time.

Launch with:
streamlit run dashboard/app.py
Or refer to the Power BI dashboard file in /dashboard/.

✅ Data Quality & Validation
Null/missing value checks

Schema consistency checks across survey rounds

Variable normalization across evolving schema

Validation logic documented in docs/data_quality_report.md

🔍 Testing
Run unit tests:

pytest tests/
Includes:

Ingestion tests

Transformation logic

Data quality validations